/* Generated by Yosys 0.33 (git sha1 2584903a060) */

module TRAFFIC_LIGHT(clk, rst, sw_led, controll_led, sw_mode, led);
  wire [3:0] _000_;
  wire [3:0] _001_;
  wire [3:0] _002_;
  wire [3:0] _003_;
  wire [3:0] _004_;
  wire [3:0] _005_;
  wire _006_;
  wire [3:0] _007_;
  wire _008_;
  wire [3:0] _009_;
  wire [3:0] _010_;
  wire [3:0] _011_;
  wire _012_;
  wire [3:0] _013_;
  wire [3:0] _014_;
  wire [3:0] _015_;
  wire [1023:0] _016_;
  wire [3:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [3:0] _020_;
  wire _021_;
  wire [3:0] _022_;
  wire [3:0] _023_;
  wire [3:0] _024_;
  wire [3:0] _025_;
  wire _026_;
  wire [3:0] _027_;
  wire _028_;
  wire [3:0] _029_;
  wire [3:0] _030_;
  wire [3:0] _031_;
  wire _032_;
  wire [3:0] _033_;
  wire [3:0] _034_;
  wire [3:0] _035_;
  wire [1023:0] _036_;
  wire [3:0] _037_;
  wire [31:0] _038_;
  wire [31:0] _039_;
  wire [3:0] _040_;
  wire [3:0] _041_;
  wire [3:0] _042_;
  wire [3:0] _043_;
  wire [3:0] _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire [1:0] _061_;
  wire [1:0] _062_;
  wire _063_;
  wire _064_;
  wire [31:0] _065_;
  wire [3:0] _066_;
  wire [3:0] _067_;
  wire [11:0] _068_;
  wire [11:0] _069_;
  wire [2:0] _070_;
  wire [2:0] _071_;
  wire [2:0] _072_;
  wire [2:0] _073_;
  wire [2:0] _074_;
  wire [3:0] _075_;
  wire [3:0] _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire [1:0] _081_;
  wire [3:0] _082_;
  wire [3:0] _083_;
  wire [1:0] _084_;
  wire [1:0] _085_;
  wire [1:0] _086_;
  wire [1:0] _087_;
  wire [1:0] _088_;
  wire [1:0] _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire [3:0] _093_;
  wire [3:0] _094_;
  wire [3:0] _095_;
  wire [3:0] _096_;
  wire [4:0] _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire [3:0] _105_;
  wire [3:0] _106_;
  wire [3:0] _107_;
  wire [3:0] _108_;
  wire [4:0] _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire [3:0] _117_;
  wire [3:0] _118_;
  wire [3:0] _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire [3:0] _125_;
  wire [1:0] _126_;
  wire [1:0] _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire [1:0] _131_;
  input clk;
  wire clk;
  input controll_led;
  wire controll_led;
  output [1:0] led;
  wire [1:0] led;
  wire mux_out;
  wire normal_led;
  wire [11:0] out;
  input rst;
  wire rst;
  wire [1:0] state;
  input [11:0] sw_led;
  wire [11:0] sw_led;
  input sw_mode;
  wire sw_mode;
  wire [3:0] \u_counter.GREEN_TIME ;
  wire [3:0] \u_counter.RED_TIME ;
  wire [3:0] \u_counter.TIME ;
  wire [3:0] \u_counter.YELLOW_TIME ;
  wire \u_counter.clk ;
  wire [3:0] \u_counter.counter ;
  wire \u_counter.normal_led ;
  wire [11:0] \u_counter.out ;
  wire \u_counter.rst ;
  wire [1:0] \u_counter.state ;
  wire [1:0] \u_led.led ;
  wire [1:0] \u_led.state ;
  wire \u_logic.clk ;
  wire \u_logic.mux_out ;
  wire \u_logic.mux_out_prev ;
  wire \u_logic.mux_rising_edge ;
  wire [1:0] \u_logic.next_state ;
  wire \u_logic.rst ;
  wire [1:0] \u_logic.state ;
  wire \u_mux.controll_led ;
  wire \u_mux.mux_out ;
  wire \u_mux.normal_led ;
  wire \u_mux.sw_mode ;
  wire [11:0] \u_set_led_time.out ;
  wire [11:0] \u_set_led_time.sw_led ;
  \$_DFFE_PP0P_  \u_logic.state_reg[0]  /* _132_ */ (
    .C(clk),
    .D(_089_[0]),
    .E(\u_logic.mux_rising_edge ),
    .Q(\u_logic.state [0]),
    .R(rst)
  );
  \$_DFFE_PP0P_  \u_logic.state_reg[1]  /* _133_ */ (
    .C(clk),
    .D(_089_[1]),
    .E(\u_logic.mux_rising_edge ),
    .Q(\u_logic.state [1]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_logic.mux_out_prev_reg  /* _134_ */ (
    .C(clk),
    .D(\u_logic.mux_out ),
    .Q(\u_logic.mux_out_prev ),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.counter_reg[0]  /* _135_ */ (
    .C(clk),
    .D(_066_[0]),
    .Q(\u_counter.counter [0]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.counter_reg[1]  /* _136_ */ (
    .C(clk),
    .D(_066_[1]),
    .Q(\u_counter.counter [1]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.counter_reg[2]  /* _137_ */ (
    .C(clk),
    .D(_066_[2]),
    .Q(\u_counter.counter [2]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.counter_reg[3]  /* _138_ */ (
    .C(clk),
    .D(_066_[3]),
    .Q(\u_counter.counter [3]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.RED_TIME_reg[0]  /* _139_ */ (
    .C(clk),
    .D(sw_led[8]),
    .Q(\u_counter.RED_TIME [0]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.RED_TIME_reg[1]  /* _140_ */ (
    .C(clk),
    .D(sw_led[9]),
    .Q(\u_counter.RED_TIME [1]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.RED_TIME_reg[2]  /* _141_ */ (
    .C(clk),
    .D(sw_led[10]),
    .Q(\u_counter.RED_TIME [2]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.RED_TIME_reg[3]  /* _142_ */ (
    .C(clk),
    .D(sw_led[11]),
    .Q(\u_counter.RED_TIME [3]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.GREEN_TIME_reg[0]  /* _143_ */ (
    .C(clk),
    .D(sw_led[4]),
    .Q(\u_counter.GREEN_TIME [0]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.GREEN_TIME_reg[1]  /* _144_ */ (
    .C(clk),
    .D(sw_led[5]),
    .Q(\u_counter.GREEN_TIME [1]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.GREEN_TIME_reg[2]  /* _145_ */ (
    .C(clk),
    .D(sw_led[6]),
    .Q(\u_counter.GREEN_TIME [2]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.GREEN_TIME_reg[3]  /* _146_ */ (
    .C(clk),
    .D(sw_led[7]),
    .Q(\u_counter.GREEN_TIME [3]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.YELLOW_TIME_reg[0]  /* _147_ */ (
    .C(clk),
    .D(sw_led[0]),
    .Q(\u_counter.YELLOW_TIME [0]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.YELLOW_TIME_reg[1]  /* _148_ */ (
    .C(clk),
    .D(sw_led[1]),
    .Q(\u_counter.YELLOW_TIME [1]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.YELLOW_TIME_reg[2]  /* _149_ */ (
    .C(clk),
    .D(sw_led[2]),
    .Q(\u_counter.YELLOW_TIME [2]),
    .R(rst)
  );
  \$_DFF_PP0_  \u_counter.YELLOW_TIME_reg[3]  /* _150_ */ (
    .C(clk),
    .D(sw_led[3]),
    .Q(\u_counter.YELLOW_TIME [3]),
    .R(rst)
  );
  \$_OR_  _151_ (
    .A(_061_[0]),
    .B(_061_[1]),
    .Y(_063_)
  );
  \$_OR_  _152_ (
    .A(_062_[0]),
    .B(_062_[1]),
    .Y(_064_)
  );
  \$_OR_  _153_ (
    .A(_073_[0]),
    .B(_073_[1]),
    .Y(_047_)
  );
  \$_OR_  _154_ (
    .A(_047_),
    .B(_073_[2]),
    .Y(_123_)
  );
  \$_OR_  _155_ (
    .A(_072_[0]),
    .B(_072_[1]),
    .Y(_049_)
  );
  \$_OR_  _156_ (
    .A(_049_),
    .B(_072_[2]),
    .Y(_122_)
  );
  \$_OR_  _157_ (
    .A(_071_[0]),
    .B(_071_[1]),
    .Y(_051_)
  );
  \$_OR_  _158_ (
    .A(_051_),
    .B(_071_[2]),
    .Y(_121_)
  );
  \$_OR_  _159_ (
    .A(_070_[0]),
    .B(_070_[1]),
    .Y(_053_)
  );
  \$_OR_  _160_ (
    .A(_053_),
    .B(_070_[2]),
    .Y(_120_)
  );
  \$_OR_  _161_ (
    .A(_077_),
    .B(_078_),
    .Y(_055_)
  );
  \$_OR_  _162_ (
    .A(_055_),
    .B(_079_),
    .Y(_124_)
  );
  \$_OR_  _163_ (
    .A(_085_[0]),
    .B(_085_[1]),
    .Y(_129_)
  );
  \$_OR_  _164_ (
    .A(_084_[0]),
    .B(_084_[1]),
    .Y(_128_)
  );
  \$_OR_  _165_ (
    .A(_078_),
    .B(_079_),
    .Y(_130_)
  );
  \$_OR_  _166_ (
    .A(\u_logic.state [0]),
    .B(\u_logic.state [1]),
    .Y(_060_)
  );
  \$_NOT_  _167_ (
    .A(sw_mode),
    .Y(_092_)
  );
  \$_NOT_  _168_ (
    .A(_063_),
    .Y(_077_)
  );
  \$_NOT_  _169_ (
    .A(_064_),
    .Y(_078_)
  );
  \$_NOT_  _170_ (
    .A(_060_),
    .Y(_079_)
  );
  \$_OR_  _171_ (
    .A(_091_),
    .B(_090_),
    .Y(\u_logic.mux_out )
  );
  \$_AND_  _172_ (
    .A(\u_counter.normal_led ),
    .B(_092_),
    .Y(_091_)
  );
  \$_AND_  _173_ (
    .A(controll_led),
    .B(sw_mode),
    .Y(_090_)
  );
  \$_AND_  _174_ (
    .A(\u_logic.mux_out ),
    .B(_080_),
    .Y(\u_logic.mux_rising_edge )
  );
  \$_MUX_  _175_ (
    .A(_065_[0]),
    .B(1'b0),
    .S(_043_[3]),
    .Y(_066_[0])
  );
  \$_MUX_  _176_ (
    .A(_065_[1]),
    .B(1'b0),
    .S(_043_[3]),
    .Y(_066_[1])
  );
  \$_MUX_  _177_ (
    .A(_065_[2]),
    .B(1'b0),
    .S(_043_[3]),
    .Y(_066_[2])
  );
  \$_MUX_  _178_ (
    .A(_065_[3]),
    .B(1'b0),
    .S(_043_[3]),
    .Y(_066_[3])
  );
  \$_MUX_  _179_ (
    .A(1'b0),
    .B(_076_[0]),
    .S(_124_),
    .Y(_125_[0])
  );
  \$_MUX_  _180_ (
    .A(1'b0),
    .B(_076_[1]),
    .S(_124_),
    .Y(_125_[1])
  );
  \$_MUX_  _181_ (
    .A(1'b0),
    .B(_076_[2]),
    .S(_124_),
    .Y(_125_[2])
  );
  \$_MUX_  _182_ (
    .A(1'b0),
    .B(_076_[3]),
    .S(_124_),
    .Y(_125_[3])
  );
  \$_MUX_  _183_ (
    .A(_007_[0]),
    .B(_094_[0]),
    .S(1'b1),
    .Y(_095_[0])
  );
  \$_MUX_  _184_ (
    .A(_007_[1]),
    .B(_094_[1]),
    .S(1'b1),
    .Y(_095_[1])
  );
  \$_MUX_  _185_ (
    .A(_007_[2]),
    .B(_094_[2]),
    .S(1'b1),
    .Y(_095_[2])
  );
  \$_MUX_  _186_ (
    .A(_007_[3]),
    .B(_094_[3]),
    .S(1'b1),
    .Y(_095_[3])
  );
  \$_MUX_  _187_ (
    .A(1'b0),
    .B(_088_[0]),
    .S(_130_),
    .Y(_131_[0])
  );
  \$_MUX_  _188_ (
    .A(1'b0),
    .B(_088_[1]),
    .S(_130_),
    .Y(_131_[1])
  );
  \$_MUX_  _189_ (
    .A(_027_[0]),
    .B(_106_[0]),
    .S(1'b0),
    .Y(_107_[0])
  );
  \$_MUX_  _190_ (
    .A(_027_[1]),
    .B(_106_[1]),
    .S(1'b0),
    .Y(_107_[1])
  );
  \$_MUX_  _191_ (
    .A(_027_[2]),
    .B(_106_[2]),
    .S(1'b0),
    .Y(_107_[2])
  );
  \$_MUX_  _192_ (
    .A(_027_[3]),
    .B(_106_[3]),
    .S(1'b0),
    .Y(_107_[3])
  );
  \$_NOT_  _193_ (
    .A(_043_[3]),
    .Y(\u_counter.normal_led )
  );
  \$_NOT_  _194_ (
    .A(\u_logic.mux_out_prev ),
    .Y(_080_)
  );
  \$_NOT_  _195_ (
    .A(_007_[0]),
    .Y(_094_[0])
  );
  \$_NOT_  _196_ (
    .A(_007_[1]),
    .Y(_094_[1])
  );
  \$_NOT_  _197_ (
    .A(_007_[2]),
    .Y(_094_[2])
  );
  \$_NOT_  _198_ (
    .A(_007_[3]),
    .Y(_094_[3])
  );
  \$_NOT_  _199_ (
    .A(_027_[0]),
    .Y(_106_[0])
  );
  \$_NOT_  _200_ (
    .A(_027_[1]),
    .Y(_106_[1])
  );
  \$_NOT_  _201_ (
    .A(_027_[2]),
    .Y(_106_[2])
  );
  \$_NOT_  _202_ (
    .A(_027_[3]),
    .Y(_106_[3])
  );
  \$_XOR_  _203_ (
    .A(\u_logic.state [0]),
    .B(1'b0),
    .Y(_061_[0])
  );
  \$_XOR_  _204_ (
    .A(\u_logic.state [1]),
    .B(1'b1),
    .Y(_061_[1])
  );
  \$_XOR_  _205_ (
    .A(\u_logic.state [0]),
    .B(1'b1),
    .Y(_062_[0])
  );
  \$_XOR_  _206_ (
    .A(\u_logic.state [1]),
    .B(1'b0),
    .Y(_062_[1])
  );
  \$_AND_  _207_ (
    .A(\u_counter.RED_TIME [0]),
    .B(_079_),
    .Y(_119_[0])
  );
  \$_AND_  _208_ (
    .A(\u_counter.RED_TIME [1]),
    .B(_079_),
    .Y(_119_[1])
  );
  \$_AND_  _209_ (
    .A(\u_counter.RED_TIME [2]),
    .B(_079_),
    .Y(_119_[2])
  );
  \$_AND_  _210_ (
    .A(\u_counter.RED_TIME [3]),
    .B(_079_),
    .Y(_119_[3])
  );
  \$_AND_  _211_ (
    .A(\u_counter.GREEN_TIME [0]),
    .B(_078_),
    .Y(_118_[0])
  );
  \$_AND_  _212_ (
    .A(\u_counter.GREEN_TIME [1]),
    .B(_078_),
    .Y(_118_[1])
  );
  \$_AND_  _213_ (
    .A(\u_counter.GREEN_TIME [2]),
    .B(_078_),
    .Y(_118_[2])
  );
  \$_AND_  _214_ (
    .A(\u_counter.GREEN_TIME [3]),
    .B(_078_),
    .Y(_118_[3])
  );
  \$_AND_  _215_ (
    .A(\u_counter.YELLOW_TIME [0]),
    .B(_077_),
    .Y(_117_[0])
  );
  \$_AND_  _216_ (
    .A(\u_counter.YELLOW_TIME [1]),
    .B(_077_),
    .Y(_117_[1])
  );
  \$_AND_  _217_ (
    .A(\u_counter.YELLOW_TIME [2]),
    .B(_077_),
    .Y(_117_[2])
  );
  \$_AND_  _218_ (
    .A(\u_counter.YELLOW_TIME [3]),
    .B(_077_),
    .Y(_117_[3])
  );
  \$_XOR_  _219_ (
    .A(_041_[0]),
    .B(1'b1),
    .Y(_097_[0])
  );
  \$_XOR_  _220_ (
    .A(_041_[1]),
    .B(_043_[0]),
    .Y(_097_[1])
  );
  \$_XOR_  _221_ (
    .A(_041_[2]),
    .B(_043_[1]),
    .Y(_097_[2])
  );
  \$_XOR_  _222_ (
    .A(_041_[3]),
    .B(_043_[2]),
    .Y(_097_[3])
  );
  \$_XOR_  _223_ (
    .A(1'b0),
    .B(_043_[3]),
    .Y(_097_[4])
  );
  \$_XOR_  _224_ (
    .A(_002_[0]),
    .B(_005_[0]),
    .Y(_096_[0])
  );
  \$_XOR_  _225_ (
    .A(_002_[1]),
    .B(_005_[1]),
    .Y(_096_[1])
  );
  \$_XOR_  _226_ (
    .A(_002_[2]),
    .B(_005_[2]),
    .Y(_096_[2])
  );
  \$_XOR_  _227_ (
    .A(_002_[3]),
    .B(_005_[3]),
    .Y(_096_[3])
  );
  \$_AND_  _228_ (
    .A(_002_[0]),
    .B(_005_[0]),
    .Y(_093_[0])
  );
  \$_AND_  _229_ (
    .A(_002_[1]),
    .B(_005_[1]),
    .Y(_093_[1])
  );
  \$_AND_  _230_ (
    .A(_002_[2]),
    .B(_005_[2]),
    .Y(_093_[2])
  );
  \$_AND_  _231_ (
    .A(_002_[3]),
    .B(_005_[3]),
    .Y(_093_[3])
  );
  \$_AND_  _232_ (
    .A(1'b1),
    .B(_079_),
    .Y(_127_[0])
  );
  \$_AND_  _233_ (
    .A(1'b0),
    .B(_079_),
    .Y(_127_[1])
  );
  \$_AND_  _234_ (
    .A(1'b0),
    .B(_078_),
    .Y(_126_[0])
  );
  \$_AND_  _235_ (
    .A(1'b1),
    .B(_078_),
    .Y(_126_[1])
  );
  \$_XOR_  _236_ (
    .A(_042_[0]),
    .B(1'b0),
    .Y(_109_[0])
  );
  \$_XOR_  _237_ (
    .A(_042_[1]),
    .B(_044_[0]),
    .Y(_109_[1])
  );
  \$_XOR_  _238_ (
    .A(_042_[2]),
    .B(_044_[1]),
    .Y(_109_[2])
  );
  \$_XOR_  _239_ (
    .A(_042_[3]),
    .B(_044_[2]),
    .Y(_109_[3])
  );
  \$_XOR_  _240_ (
    .A(1'b0),
    .B(_044_[3]),
    .Y(_109_[4])
  );
  \$_XOR_  _241_ (
    .A(_022_[0]),
    .B(_025_[0]),
    .Y(_108_[0])
  );
  \$_XOR_  _242_ (
    .A(_022_[1]),
    .B(_025_[1]),
    .Y(_108_[1])
  );
  \$_XOR_  _243_ (
    .A(_022_[2]),
    .B(_025_[2]),
    .Y(_108_[2])
  );
  \$_XOR_  _244_ (
    .A(_022_[3]),
    .B(_025_[3]),
    .Y(_108_[3])
  );
  \$_AND_  _245_ (
    .A(_022_[0]),
    .B(_025_[0]),
    .Y(_105_[0])
  );
  \$_AND_  _246_ (
    .A(_022_[1]),
    .B(_025_[1]),
    .Y(_105_[1])
  );
  \$_AND_  _247_ (
    .A(_022_[2]),
    .B(_025_[2]),
    .Y(_105_[2])
  );
  \$_AND_  _248_ (
    .A(_022_[3]),
    .B(_025_[3]),
    .Y(_105_[3])
  );
  \$_AND_  _249_ (
    .A(_041_[0]),
    .B(1'b1),
    .Y(_098_)
  );
  \$_AND_  _250_ (
    .A(_041_[1]),
    .B(_043_[0]),
    .Y(_099_)
  );
  \$_AND_  _251_ (
    .A(_041_[3]),
    .B(_093_[2]),
    .Y(_100_)
  );
  \$_AND_  _252_ (
    .A(_102_),
    .B(_043_[1]),
    .Y(_101_)
  );
  \$_AND_  _253_ (
    .A(_041_[3]),
    .B(_041_[2]),
    .Y(_102_)
  );
  \$_AND_  _254_ (
    .A(_041_[2]),
    .B(_043_[1]),
    .Y(_103_)
  );
  \$_OR_  _255_ (
    .A(_093_[0]),
    .B(_098_),
    .Y(_043_[0])
  );
  \$_OR_  _256_ (
    .A(_093_[1]),
    .B(_099_),
    .Y(_043_[1])
  );
  \$_OR_  _257_ (
    .A(_093_[3]),
    .B(_100_),
    .Y(_104_)
  );
  \$_OR_  _258_ (
    .A(_104_),
    .B(_101_),
    .Y(_043_[3])
  );
  \$_OR_  _259_ (
    .A(_093_[2]),
    .B(_103_),
    .Y(_043_[2])
  );
  \$_AND_  _260_ (
    .A(_042_[0]),
    .B(1'b0),
    .Y(_110_)
  );
  \$_AND_  _261_ (
    .A(_042_[1]),
    .B(_044_[0]),
    .Y(_111_)
  );
  \$_AND_  _262_ (
    .A(_042_[3]),
    .B(_105_[2]),
    .Y(_112_)
  );
  \$_AND_  _263_ (
    .A(_114_),
    .B(_044_[1]),
    .Y(_113_)
  );
  \$_AND_  _264_ (
    .A(_042_[3]),
    .B(_042_[2]),
    .Y(_114_)
  );
  \$_AND_  _265_ (
    .A(_042_[2]),
    .B(_044_[1]),
    .Y(_115_)
  );
  \$_OR_  _266_ (
    .A(_105_[0]),
    .B(_110_),
    .Y(_044_[0])
  );
  \$_OR_  _267_ (
    .A(_105_[1]),
    .B(_111_),
    .Y(_044_[1])
  );
  \$_OR_  _268_ (
    .A(_105_[3]),
    .B(_112_),
    .Y(_116_)
  );
  \$_OR_  _269_ (
    .A(_116_),
    .B(_113_),
    .Y(_044_[3])
  );
  \$_OR_  _270_ (
    .A(_105_[2]),
    .B(_115_),
    .Y(_044_[2])
  );
  assign led = \u_logic.state ;
  assign mux_out = \u_logic.mux_out ;
  assign normal_led = \u_counter.normal_led ;
  assign out = sw_led;
  assign state = \u_logic.state ;
  assign \u_counter.clk  = clk;
  assign \u_counter.out  = sw_led;
  assign \u_counter.rst  = rst;
  assign \u_counter.state  = \u_logic.state ;
  assign \u_led.led  = \u_logic.state ;
  assign \u_led.state  = \u_logic.state ;
  assign \u_logic.clk  = clk;
  assign \u_logic.next_state  = 2'bxx;
  assign \u_logic.rst  = rst;
  assign \u_mux.controll_led  = controll_led;
  assign \u_mux.mux_out  = \u_logic.mux_out ;
  assign \u_mux.normal_led  = \u_counter.normal_led ;
  assign \u_mux.sw_mode  = sw_mode;
  assign \u_set_led_time.out  = sw_led;
  assign \u_set_led_time.sw_led  = sw_led;
  assign _067_ = 4'b0000;
  assign _068_ = { \u_counter.RED_TIME , \u_counter.GREEN_TIME , \u_counter.YELLOW_TIME  };
  assign _074_ = { _079_, _078_, _077_ };
  assign _075_ = \u_counter.TIME ;
  assign \u_counter.TIME  = _125_;
  assign _069_[3:0] = _117_;
  assign _069_[7:4] = _118_;
  assign _069_[11:8] = _119_;
  assign _070_[0] = _069_[0];
  assign _070_[1] = _069_[4];
  assign _070_[2] = _069_[8];
  assign _076_[0] = _120_;
  assign _071_[0] = _069_[1];
  assign _071_[1] = _069_[5];
  assign _071_[2] = _069_[9];
  assign _076_[1] = _121_;
  assign _072_[0] = _069_[2];
  assign _072_[1] = _069_[6];
  assign _072_[2] = _069_[10];
  assign _076_[2] = _122_;
  assign _073_[0] = _069_[3];
  assign _073_[1] = _069_[7];
  assign _073_[2] = _069_[11];
  assign _076_[3] = _123_;
  assign _001_ = \u_counter.counter ;
  assign _004_ = \u_counter.TIME ;
  assign _009_ = _043_;
  assign _010_ = _041_;
  assign _011_ = _000_;
  assign _002_ = _003_;
  assign _005_ = _095_;
  assign _041_ = _096_;
  assign _000_ = _097_[3:0];
  assign _081_ = 2'b00;
  assign _082_ = 4'b0110;
  assign _086_ = { _079_, _078_ };
  assign _087_ = _089_;
  assign _089_ = _131_;
  assign _083_[1:0] = _126_;
  assign _083_[3:2] = _127_;
  assign _084_[0] = _083_[0];
  assign _084_[1] = _083_[2];
  assign _088_[0] = _128_;
  assign _085_[0] = _083_[1];
  assign _085_[1] = _083_[3];
  assign _088_[1] = _129_;
  assign _021_ = 1'b1;
  assign _024_ = \u_counter.counter ;
  assign _029_ = _044_;
  assign _030_ = _042_;
  assign _031_ = _065_[3:0];
  assign _022_ = _023_;
  assign _025_ = _107_;
  assign _042_ = _108_;
  assign _065_[3:0] = _109_[3:0];
  assign _013_ = _043_;
  assign _014_ = _093_;
  assign _015_ = _041_;
  assign _016_ = 1024'b
  assign _017_ = _043_;
  assign _020_[0] = _041_[0];
  assign _019_ = 32'b00000000000000000000000000000100;
  assign _018_ = 32'b00000000000000000000000000000000;
  assign _007_ = \u_counter.TIME ;
  assign _003_ = \u_counter.counter ;
  assign _033_ = _044_;
  assign _034_ = _105_;
  assign _035_ = _042_;
  assign _036_ = 1024'b
  assign _037_ = _044_;
  assign _040_[0] = _042_[0];
  assign _039_ = 32'b00000000000000000000000000000100;
  assign _038_ = 32'b00000000000000000000000000000000;
  assign _027_ = \u_counter.counter ;
  assign _023_ = 4'b0001;
endmodule
